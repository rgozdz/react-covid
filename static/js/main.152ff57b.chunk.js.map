{"version":3,"sources":["components/Cards.module.css","api/index.js","components/Cards.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","url","fetchData","a","axios","get","data","confirmed","recovered","deaths","lastUpdate","console","error","fetchGlobalData","fetchCountryData","country","Card","lastUpdateDate","Date","toLocaleDateString","style","textAlign","active","value","className","styles","container","card","toLocaleString","App","state","globalData","countryData","this","setState","Cards","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"iLACAA,EAAOC,QAAU,CAAC,UAAY,yBAAyB,KAAO,oBAAoB,UAAY,yBAAyB,OAAS,sBAAsB,UAAY,yBAAyB,OAAS,wB,oKCC9LC,EAAM,iCAENC,EAAS,uCAAG,WAAOD,GAAP,2BAAAE,EAAA,+EAGwDC,IAAMC,IAAIJ,GAHlE,2BAGHK,KAAQC,EAHL,EAGKA,UAAWC,EAHhB,EAGgBA,UAAWC,EAH3B,EAG2BA,OAAQC,EAHnC,EAGmCA,WACvCJ,EAAO,CAAEC,YAAWC,YAAWC,SAAQC,cAJnC,kBAMHJ,GANG,kCAQVK,QAAQC,MAAR,MARU,0DAAH,sDAYFC,EAAe,uCAAG,sBAAAV,EAAA,+EAAYD,EAAUD,IAAtB,2CAAH,qDAEfa,EAAgB,uCAAG,WAAOC,GAAP,SAAAZ,EAAA,+EAAmBD,EAAU,GAAD,OAAID,EAAJ,sBAAqBc,KAAjD,2CAAH,sD,gBCqBdC,EAnCF,SAAC,GAAwD,IAAD,IAAtDV,KAAOC,EAA+C,EAA/CA,UAAWC,EAAoC,EAApCA,UAAWC,EAAyB,EAAzBA,OAAQC,EAAiB,EAAjBA,WAE1CO,EAAiB,IAAIC,KAAKR,GAAYS,qBAE5C,IAAIZ,EACA,OAAO,wBAAIa,MAAO,CAACC,UAAW,WAAvB,cAGX,IAAMC,EAASf,EAAUgB,MAAQf,EAAUe,MAAQd,EAAOc,MAC1D,OACI,yBAAKC,UAAWC,IAAOC,WACnB,yBAAKF,UAAS,UAAKC,IAAOE,KAAZ,YAAoBF,IAAOlB,YACrC,yCACA,8BAAOA,EAAUgB,MAAMK,kBAAwB,6BAC/C,8CAAoBX,IAExB,yBAAKO,UAAS,UAAKC,IAAOE,KAAZ,YAAoBF,IAAOH,SACrC,4CACA,8BAAOA,EAAOM,kBAAwB,6BACtC,8CAAoBX,IAExB,yBAAKO,UAAS,UAAKC,IAAOE,KAAZ,YAAoBF,IAAOjB,YACrC,yCACA,8BAAOA,EAAUe,MAAMK,kBAAwB,6BAC/C,8CAAoBX,IAExB,yBAAKO,UAAS,UAAKC,IAAOE,KAAZ,YAAoBF,IAAOhB,SACrC,sCACA,8BAAOA,EAAOc,MAAMK,kBAAwB,6BAC5C,8CAAoBX,MCErBY,E,4MA5BbC,MAAO,CACLC,WAAY,GACZC,YAAa,I,oMAIYnB,I,cAAnBkB,E,OACNE,KAAKC,SAAS,CAACH,eAEK,S,SACMjB,EADN,U,OACdkB,E,OACNC,KAAKC,SAAS,CAACF,gB,qIAIf,OACE,6BACE,wBAAIZ,MAAO,CAACC,UAAW,WAAvB,SACA,kBAACc,EAAD,CAAO7B,KAAM2B,KAAKH,MAAMC,aAExB,wBAAIX,MAAO,CAACC,UAAW,WAAvB,UACA,kBAACc,EAAD,CAAO7B,KAAM2B,KAAKH,MAAME,mB,GAvBdI,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAzC,GACLD,QAAQC,MAAMA,EAAM0C,c","file":"static/js/main.152ff57b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3mAuw\",\"card\":\"Cards_card__2693w\",\"confirmed\":\"Cards_confirmed__36R7T\",\"active\":\"Cards_active__143zN\",\"recovered\":\"Cards_recovered__2h9S_\",\"deaths\":\"Cards_deaths__JFys-\"};","import axios from 'axios';\r\n\r\nconst url = 'https://covid19.mathdro.id/api';\r\n\r\nconst fetchData = async (url) => {\r\n\r\n    try{\r\n        const {data : {confirmed, recovered, deaths, lastUpdate}} = await axios.get(url);\r\n        const data = { confirmed, recovered, deaths, lastUpdate};\r\n\r\n        return data;\r\n    } catch(error) {\r\n        console.error(error);\r\n    }\r\n}\r\n\r\nexport const fetchGlobalData = async () => fetchData(url);\r\n\r\nexport const fetchCountryData = async (country) => fetchData(`${url}/countries/${country}`)\r\n","import React from 'react';\r\nimport styles from './Cards.module.css';\r\n\r\n\r\nconst Card = ({data: {confirmed, recovered, deaths, lastUpdate}}) => {\r\n\r\n    const lastUpdateDate = new Date(lastUpdate).toLocaleDateString();\r\n\r\n    if(!confirmed){\r\n        return <h2 style={{textAlign: \"center\"}}>Loading...</h2>\r\n    }\r\n\r\n    const active = confirmed.value - recovered.value - deaths.value;\r\n    return(\r\n        <div className={styles.container}>\r\n            <div className={`${styles.card} ${styles.confirmed}`}>\r\n                <h2>Confirmed</h2>\r\n                <span>{confirmed.value.toLocaleString()}</span><br></br>\r\n                <span>Last update: {lastUpdateDate}</span>\r\n            </div>\r\n            <div className={`${styles.card} ${styles.active}`}>\r\n                <h2>Still active</h2>\r\n                <span>{active.toLocaleString()}</span><br></br>\r\n                <span>Last update: {lastUpdateDate}</span>\r\n            </div>\r\n            <div className={`${styles.card} ${styles.recovered}`}>\r\n                <h2>Recovered</h2>\r\n                <span>{recovered.value.toLocaleString()}</span><br></br>\r\n                <span>Last update: {lastUpdateDate}</span>\r\n            </div>\r\n            <div className={`${styles.card} ${styles.deaths}`}>\r\n                <h2>Deaths</h2>\r\n                <span>{deaths.value.toLocaleString()}</span><br></br>\r\n                <span>Last update: {lastUpdateDate}</span>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React, {Component} from 'react';\nimport './App.css';\nimport { fetchGlobalData, fetchCountryData } from './api';\nimport Cards from './components/Cards';\n\nclass App extends Component {s\n \n  state= {\n    globalData: {},\n    countryData: {}\n  }\n\n  async componentDidMount() {\n    const globalData = await fetchGlobalData();\n    this.setState({globalData});\n\n    const countryName = 'poland'\n    const countryData = await fetchCountryData(countryName);\n    this.setState({countryData});\n  }\n\n  render() {\n    return(\n      <div>\n        <h1 style={{textAlign: 'center'}}>World</h1>\n        <Cards data={this.state.globalData}></Cards>\n\n        <h1 style={{textAlign: 'center'}}>Poland</h1>\n        <Cards data={this.state.countryData}></Cards>\n      </div>\n    )\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}