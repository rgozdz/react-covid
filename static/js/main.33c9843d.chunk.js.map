{"version":3,"sources":["api/index.js","components/Cards/Cards.jsx","components/Chart/Chart.jsx","App.js","serviceWorker.js","index.js","components/Cards/Cards.module.css","components/Chart/Chart.module.css"],"names":["url","fetchData","a","axios","get","data","confirmed","recovered","deaths","lastUpdate","console","error","fetchGlobalData","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountryData","country","Card","lastUpdateDate","Date","toLocaleDateString","style","textAlign","active","value","className","styles","container","card","amount","start","end","duration","separator","Chart","useState","setDailyData","useEffect","fetchApi","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","App","state","globalData","countryData","this","setState","Cards","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message","module","exports"],"mappings":"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","file":"static/js/main.33c9843d.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst url = \"https://covid19.mathdro.id/api\";\r\n\r\nconst fetchData = async (url) => {\r\n  try {\r\n    const {\r\n      data: { confirmed, recovered, deaths, lastUpdate },\r\n    } = await axios.get(url);\r\n    const data = { confirmed, recovered, deaths, lastUpdate };\r\n\r\n    return data;\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n};\r\n\r\nexport const fetchGlobalData = async () => fetchData(url);\r\n\r\nexport const fetchDailyData = async () => {\r\n  try {\r\n    const { data } = await axios.get(`${url}/daily`);\r\n    const modifiedData = data.map((dailyData) => ({\r\n      confirmed: dailyData.confirmed.total,\r\n      deaths: dailyData.deaths.total,\r\n      date: dailyData.reportDate,\r\n    }));\r\n\r\n    return modifiedData;\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n};\r\n\r\nexport const fetchCountryData = async (country) =>\r\n  fetchData(`${url}/countries/${country}`);\r\n","import React from \"react\";\r\nimport styles from \"./Cards.module.css\";\r\nimport CountUp from \"react-countup\";\r\n\r\nconst Card = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\r\n  const lastUpdateDate = new Date(lastUpdate).toLocaleDateString();\r\n\r\n  if (!confirmed) {\r\n    return <h2 style={{ textAlign: \"center\" }}>Loading...</h2>;\r\n  }\r\n\r\n  const active = confirmed.value - recovered.value - deaths.value;\r\n  return (\r\n    <div className={styles.container}>\r\n      <div className={`${styles.card} ${styles.confirmed}`}>\r\n        <h2>Confirmed</h2>\r\n        <CountUp\r\n          className={styles.amount}\r\n          start={0}\r\n          end={confirmed.value}\r\n          duration={2.5}\r\n          separator=\",\"\r\n        ></CountUp>\r\n        <br></br>\r\n        <span>Last update: {lastUpdateDate}</span>\r\n      </div>\r\n      <div className={`${styles.card} ${styles.active}`}>\r\n        <h2>Still active</h2>\r\n        <CountUp\r\n          className={styles.amount}\r\n          start={0}\r\n          end={active}\r\n          duration={2.5}\r\n          separator=\",\"\r\n        ></CountUp>\r\n        <br></br>\r\n        <span>Last update: {lastUpdateDate}</span>\r\n      </div>\r\n      <div className={`${styles.card} ${styles.recovered}`}>\r\n        <h2>Recovered</h2>\r\n        <CountUp\r\n          className={styles.amount}\r\n          start={0}\r\n          end={recovered.value}\r\n          duration={2.5}\r\n          separator=\",\"\r\n        ></CountUp>\r\n        <br></br>\r\n        <span>Last update: {lastUpdateDate}</span>\r\n      </div>\r\n      <div className={`${styles.card} ${styles.deaths}`}>\r\n        <h2>Deaths</h2>\r\n        <CountUp\r\n          className={styles.amount}\r\n          start={0}\r\n          end={deaths.value}\r\n          duration={2.5}\r\n          separator=\",\"\r\n        ></CountUp>\r\n        <br></br>\r\n        <span>Last update: {lastUpdateDate}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { fetchDailyData } from \"../../api\";\r\nimport { Line, Bar } from \"react-chartjs-2\";\r\nimport styles from \"./Chart.module.css\";\r\n\r\nconst Chart = () => {\r\n  const [dailyData, setDailyData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchApi = async () => {\r\n      setDailyData(await fetchDailyData());\r\n    };\r\n    fetchApi();\r\n  });\r\n\r\n  const lineChart = dailyData.length ? (\r\n    <Line\r\n      data={{\r\n        labels: dailyData.map(({ date }) => date),\r\n        datasets: [\r\n          {\r\n            data: dailyData.map(({ confirmed }) => confirmed),\r\n            label: \"Infected\",\r\n            borderColor: \"#3333ff\",\r\n            fill: true,\r\n          },\r\n          {\r\n            data: dailyData.map(({ deaths }) => deaths),\r\n            label: \"Deaths\",\r\n            borderColor: \"red\",\r\n            backgroundColor: \"rgba(255, 0,0,0.5)\",\r\n            fill: true,\r\n          },\r\n        ],\r\n      }}\r\n    />\r\n  ) : null;\r\n  return <div className={styles.container}>{lineChart}</div>;\r\n};\r\n\r\nexport default Chart;\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport { fetchGlobalData, fetchCountryData } from \"./api\";\r\nimport Cards from \"./components/Cards/Cards\";\r\nimport Chart from \"./components/Chart/Chart\";\r\n\r\nclass App extends Component {\r\n  s;\r\n\r\n  state = {\r\n    globalData: {},\r\n    countryData: {},\r\n  };\r\n\r\n  async componentDidMount() {\r\n    const globalData = await fetchGlobalData();\r\n    this.setState({ globalData });\r\n\r\n    const countryName = \"poland\";\r\n    const countryData = await fetchCountryData(countryName);\r\n    this.setState({ countryData });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1 style={{ textAlign: \"center\" }}>World</h1>\r\n        <Cards data={this.state.globalData}></Cards>\r\n\r\n        <h1 style={{ textAlign: \"center\" }}>Poland</h1>\r\n        <Cards data={this.state.countryData}></Cards>\r\n\r\n        <Chart></Chart>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"amount\":\"Cards_amount__3qbH-\",\"container\":\"Cards_container__28Y_X\",\"card\":\"Cards_card__2V-pP\",\"confirmed\":\"Cards_confirmed__2zO3q\",\"active\":\"Cards_active__378Ti\",\"recovered\":\"Cards_recovered__1vy5k\",\"deaths\":\"Cards_deaths__d7SOS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1gN2w\"};"],"sourceRoot":""}